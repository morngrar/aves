apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    defaultConfig {
        applicationId "ntnu20.imt3673.group4.aves"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        def secretsProperties = new Properties()
        if (rootProject.file("secrets.properties").exists()) {
            rootProject.file("secrets.properties")?.withInputStream {
                secretsProperties.load(it)
            }
        }
        resValue "string", "google_maps_key", (secretsProperties["GOOGLE_MAPS_API_KEY"] ?: "")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    lintOptions {
        // Turns off checks for the issue IDs you specify.
        disable 'TypographyFractions', 'TypographyQuotes'
        // Turns on checks for the issue IDs you specify. These checks are in
        // addition to the default lint checks.
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'

        // if set to true (default), stops the build if errors are found.
        abortOnError false
        // if true, only report errors.
        //ignoreWarnings true
    }


}

tasks.withType(Test) {
    systemProperty "robolectric.logging", "stdout"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation 'androidx.fragment:fragment-ktx:1.2.4'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.6'

    /** Dependency to include Maps SDK for Android */
    implementation 'com.google.android.gms:play-services-maps:17.0.0'

    /** Firebase */
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-firestore:21.4.3'

    /** Lifecycle */
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    /** Card View */
    def cardview_version = "1.0.0"
    implementation "androidx.cardview:cardview:$cardview_version"

    /** Recyclerview */
    def recyclerview_version = "1.0.0"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"

    /** Glide */
    def glide_version = "4.8.0"
    //noinspection GradleDependency
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"

    /** Navigation */
    def nav_version = "2.3.0-alpha04"
    implementation 'androidx.navigation:navigation-common-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-runtime-ktx:2.2.2'
    implementation "androidx.navigation:navigation-fragment-ktx:2.2.2"
    implementation "androidx.navigation:navigation-ui-ktx:2.2.2"

    /** Dynamic Feature Module Support */
    implementation "androidx.navigation:navigation-dynamic-features-fragment:2.3.0-alpha05"

    /** Testing Navigation */
    androidTestImplementation "androidx.navigation:navigation-testing:2.3.0-alpha05"

    /** espresso */
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'

    /** Room */
    kapt "androidx.room:room-compiler:2.2.5"
    implementation 'androidx.room:room-runtime:2.2.5'
    implementation 'androidx.room:room-ktx:2.2.5'

    /** External */
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation 'com.google.android.material:material:1.1.0'

    /** location */
    implementation 'com.google.android.gms:play-services-location:17.0.0'

    /** unit testing, robolectric for weather module testing */
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.robolectric:robolectric:4.3'

    /** instrumentation testing */
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0-alpha05'

}
